service: notes-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWeb

  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref noteTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt noteTable.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref noteTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt noteTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer        
  deleteNote:
      handler: handler.deleteNote
      environment:
        NOTES_TABLE_NAME: !Ref noteTable
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt noteTable.Arn
      events:
        - http:
            method: delete
            path: notes/{id}
            authorizer: authorizer
  getAllNotes:
      handler: handler.getAllNotes
      environment:
        NOTES_TABLE_NAME: !Ref noteTable
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt noteTable.Arn
      events:
        - http:
            method: get
            path: notes
            authorizer:
              name: Authorizer_Userpool
              type: COGNITO_USER_POOLS
              arn: !GetAtt cognitoUserPool.Arn
# ${ssm:/notes/${self:provider.stage}/userPoolArn}
plugins:
  - serverless-iam-roles-per-function

# you can add CloudFormation resource templates here
resources:
 Resources:
   ${file(resources.yml)}
 

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
